#include <stdio.h>
#include <stdlib.h>

#define MAX 100 // Maximum number of vertices

// Queue structure
struct Queue {
    int items[MAX];
    int front, rear;
};

// Function to initialize the queue
void initQueue(struct Queue *q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if queue is empty
int isEmpty(struct Queue *q) {
    return q->front == -1;
}

// Function to enqueue an element
void enqueue(struct Queue *q, int value) {
    if (q->rear == MAX - 1)
        return;
    if (q->front == -1) q->front = 0;
    q->items[++q->rear] = value;
}

// Function to dequeue an element
int dequeue(struct Queue *q) {
    if (isEmpty(q))
        return -1;
    int item = q->items[q->front++];
    if (q->front > q->rear) // Reset queue
        q->front = q->rear = -1;
    return item;
}

// BFS function
void BFS(int graph[MAX][MAX], int start, int vertices) {
    struct Queue q;
    initQueue(&q);
    
    int visited[MAX] = {0}; // Track visited nodes
    visited[start] = 1;
    enqueue(&q, start);

    printf("BFS Traversal: ");

    while (!isEmpty(&q)) {
        int current = dequeue(&q);
        printf("%d ", current);

        for (int i = 0; i < vertices; i++) {
            if (graph[current][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(&q, i);
            }
        }
    }
    printf("\n");
}

// Main function
int main() {
    int graph[MAX][MAX] = {
        {0, 1, 1, 0, 0},
        {1, 0, 0, 1, 1},
        {1, 0, 0, 1, 0},
        {0, 1, 1, 0, 1},
        {0, 1, 0, 1, 0}
    };

    int vertices = 5;
    int startVertex = 0;

    BFS(graph, startVertex, vertices);

    return 0;
}
