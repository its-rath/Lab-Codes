#include <stdio.h>
#include <stdlib.h>

#define V 5 // Number of vertices

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent, rank;
};

// Function to find the subset of an element
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Function to union two subsets
void unionSets(struct Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// Function to implement Kruskal's Algorithm
void kruskalMST(struct Edge edges[], int numEdges) {
    struct Edge result[V - 1]; // Stores the MST edges
    int e = 0, i = 0;

    // Sort edges by weight
    qsort(edges, numEdges, sizeof(edges[0]), 
          (int (*)(const void*, const void*)) (int (*)(const Edge*, const Edge*)) [](const Edge* a, const Edge* b) {
              return a->weight - b->weight;
          });

    struct Subset subsets[V];

    // Initialize subsets
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    while (e < V - 1 && i < numEdges) {
        struct Edge nextEdge = edges[i++];
        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        if (x != y) { // If no cycle is formed, include it in the MST
            result[e++] = nextEdge;
            unionSets(subsets, x, y);
        }
    }

    // Print the MST
    printf("Edge \tWeight\n");
    for (i = 0; i < e; i++)
        printf("%d - %d \t%d\n", result[i].src, result[i].dest, result[i].weight);
}

// Main function
int main() {
    struct Edge edges[] = {
        {0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4}
    };
    int numEdges = sizeof(edges) / sizeof(edges[0]);

    kruskalMST(edges, numEdges);

    return 0;
}
